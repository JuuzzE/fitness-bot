import logging
import os
import httpx
import json
from datetime import datetime, date

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# (–ö–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ v2.7)
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)
if not GROQ_API_KEY: logger.warning("GROQ_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. AI-—Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
if not TELEGRAM_TOKEN: logger.critical("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è."); exit(1) # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å exit()

# --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI (–∫–∞–∫ –≤ v2.7) ---
SYSTEM_PROMPT_DIETITIAN = """...""" # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ –ø–æ–ª–Ω—ã–π SYSTEM_PROMPT_DIETITIAN –∏–∑ v2.7

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ö–ª—é—á–∏ (–∫–∞–∫ –≤ v2.7) ---
(PROFILE_GENDER, PROFILE_AGE, PROFILE_HEIGHT, PROFILE_WEIGHT,
 PROFILE_ACTIVITY, PROFILE_GOAL) = range(6)
(ADDMEAL_CHOOSE_TYPE, ADDMEAL_GET_DESCRIPTION) = range(PROFILE_GOAL + 1, PROFILE_GOAL + 3)
GENDER, AGE, HEIGHT, CURRENT_WEIGHT, ACTIVITY_LEVEL, GOAL = "gender", "age", "height", "current_weight", "activity_level", "goal"
PROFILE_COMPLETE, BMI, BMR, TDEE, TARGET_CALORIES = "profile_complete", "bmi", "bmr", "tdee", "target_calories"
AWAITING_WEIGHT_UPDATE, TODAY_MEALS, LAST_MEAL_DATE = "awaiting_weight_update", "today_meals", "last_meal_date"
ACTIVITY_FACTORS = {"–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è": 1.2, "–ª–µ–≥–∫–∞—è": 1.375, "—Å—Ä–µ–¥–Ω—è—è": 1.55, "–≤—ã—Å–æ–∫–∞—è": 1.725, "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è": 1.9}
GOAL_FACTORS = {"–ø–æ—Ö—É–¥–µ—Ç—å": -500, "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å": 0, "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": 300}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ (–∫–∞–∫ –≤ v2.7) ---
# (–í—Å—Ç–∞–≤—å —Å—é–¥–∞ calculate_bmi, calculate_bmr, calculate_tdee, calculate_target_calories, get_bmi_interpretation –∏–∑ v2.7)
def calculate_bmi(w, h): return round(w / ((h / 100) ** 2), 1) if all(isinstance(i, (int, float)) for i in [w, h]) and h != 0 else None
def calculate_bmr(w, h, a, g_str):
    if not all([w, h, a, g_str]) or not all(isinstance(i, (int, float)) for i in [w, h, a]): return None
    g_str = g_str.lower()
    if g_str == "–º—É–∂—Å–∫–æ–π": return round((10 * w) + (6.25 * h) - (5 * a) + 5)
    elif g_str == "–∂–µ–Ω—Å–∫–∏–π": return round((10 * w) + (6.25 * h) - (5 * a) - 161)
    return None
def calculate_tdee(bmr, act_lvl): return round(bmr * ACTIVITY_FACTORS.get(act_lvl.lower())) if bmr and act_lvl and isinstance(bmr, (int, float)) else None
def calculate_target_calories(tdee, gl): return tdee + GOAL_FACTORS.get(gl.lower()) if tdee and gl and isinstance(tdee, (int, float)) else None
def get_bmi_interpretation(bmi):
    if bmi is None: return ""
    if bmi < 18.5: return " (üìâ –î–µ—Ñ–∏—Ü–∏—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞)"
    if bmi < 25: return " (‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å)"
    if bmi < 30: return " (‚ö†Ô∏è –ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å)"
    return " (üÜò –û–∂–∏—Ä–µ–Ω–∏–µ)"


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Groq API (–∫–∞–∫ –≤ v2.7) ---
async def ask_groq(user_message: str, model: str = "gemma2-9b-it", system_prompt_override: str = None, temperature: float = 0.5):
    # (–í—Å—Ç–∞–≤—å —Å—é–¥–∞ –ø–æ–ª–Ω—ã–π –∫–æ–¥ ask_groq –∏–∑ v2.7)
    if not GROQ_API_KEY:
        logger.warning("GROQ_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. AI –∑–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–≤–æ–∏–º AI-–º–æ–∑–≥–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞."
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}
    current_system_prompt = system_prompt_override if system_prompt_override else SYSTEM_PROMPT_DIETITIAN
    data = {"messages": [{"role": "system", "content": current_system_prompt}, {"role": "user", "content": user_message}], "model": model, "temperature": temperature}
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq. –ú–æ–¥–µ–ª—å: {model}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}. –°–æ–æ–±—â–µ–Ω–∏–µ: {user_message[:100]}...")
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post("https://api.groq.com/openai/v1/chat/completions", headers=headers, json=data, timeout=30.0)
            response.raise_for_status()
            response_data = response.json()
            if response_data.get("choices") and response_data["choices"][0].get("message"):
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Groq ({model}).")
                return response_data["choices"][0]["message"]["content"]
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq ({model}): {response_data}")
            return "ü§ñ –ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏ —Å AI. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞."
    except httpx.HTTPStatusError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –æ—Ç Groq ({model}): {e.response.status_code} - {e.response.text}")
        if "model_decommissioned" in e.response.text: return f"üîå –û–π, –ø–æ—Ö–æ–∂–µ, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å AI ({model}) –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –≤ –∫—É—Ä—Å–µ!"
        return f"üîå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI (–∫–æ–¥: {e.response.status_code}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π API –∫–ª—é—á Groq."
    except httpx.ReadTimeout:
        logger.error(f"–¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq API ({model}). –ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç.")
        return "‚è≥ AI –∑–∞–¥—É–º–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –Ω–∞–¥–æ–ª–≥–æ –∏ –Ω–µ —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é."
    except httpx.TimeoutException as e:
        logger.error(f"–û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Groq API ({model}): {e}")
        return "‚è≥ –£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å AI –≤–æ–≤—Ä–µ–º—è (—Ç–∞–π–º–∞—É—Ç). –ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq API ({model}): {e}")
        return "üì° –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –≤ —Å–µ—Ç–∏."
    except (KeyError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq API ({model}): {e}")
        return "ü§Ø –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ ask_groq ({model}): {e}", exc_info=True)
        return "üí• –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ —Å–æ–≤—Å–µ–º –Ω–µ —Ç–∞–∫ —Å AI! –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –≤ –∫—É—Ä—Å–µ."

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è ConversationHandler (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - –∫–∞–∫ –≤ v2.7) ---
# (–í—Å—Ç–∞–≤—å —Å—é–¥–∞ start_command ... process_final_profile, cancel_onboarding –∏–∑ v2.7)
# --- –ö–æ–ø–∏–ø–∞—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏–∑ v2.7 (—Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π –¥–ª—è LAST_MEAL_DATE –≤ cancel_onboarding) ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    today_str = date.today().isoformat()
    if context.user_data.get(LAST_MEAL_DATE) != today_str:
        context.user_data[TODAY_MEALS] = []
        context.user_data[LAST_MEAL_DATE] = today_str
        logger.info(f"User {user.id}: –ù–æ–≤—ã–π –¥–µ–Ω—å, –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")
    if context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ –º–Ω–æ–π. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–µ–≥–æ–¥–Ω—è?\n–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏!",parse_mode=ParseMode.MARKDOWN)
        return ConversationHandler.END
    if not context.user_data.get(GENDER):
        context.user_data.clear()
        context.user_data[LAST_MEAL_DATE] = today_str 
        context.user_data[TODAY_MEALS] = []
        logger.info(f"User {user.id} ({user.username}) –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    else: logger.info(f"User {user.id} ({user.username}) –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    await update.message.reply_text(f"üåü –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø *–§–∏—Ç–ì—É—Ä—É* ‚Äì —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–¥–∏–µ—Ç–æ–ª–æ–≥ –∏ —Ç—Ä–µ–Ω–µ—Ä.\n\n–ß—Ç–æ–±—ã –Ω–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –±—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ. –≠—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ! ü§´\n\nüöπüö∫ –î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π *–ø–æ–ª*:",reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="–º—É–∂—Å–∫–æ–π"), InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="–∂–µ–Ω—Å–∫–∏–π")]]),parse_mode=ParseMode.MARKDOWN)
    return PROFILE_GENDER
async def handle_gender_and_ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer(); context.user_data[GENDER] = query.data
    await query.edit_message_text(text=f"–ü–æ–ª: *{query.data.capitalize()}*. –û—Ç–ª–∏—á–Ω–æ! üëç\n\nüéÇ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π *–≤–æ–∑—Ä–∞—Å—Ç* (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):",parse_mode=ParseMode.MARKDOWN)
    return PROFILE_AGE
async def handle_age_and_ask_height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        age = int(update.message.text)
        if not 10 <= age <= 100: raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        context.user_data[AGE] = age
        await update.message.reply_text(text=f"–í–æ–∑—Ä–∞—Å—Ç: *{age} –ª–µ—Ç*. –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ‚úÖ\n\nüìè –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π *—Ä–æ—Å—Ç* (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):",parse_mode=ParseMode.MARKDOWN)
        return PROFILE_HEIGHT
    except ValueError as e:
        logger.warning(f"User {update.effective_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {update.message.text}. –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("ü§î –•–º, –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        return PROFILE_AGE
async def handle_height_and_ask_weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        height = int(update.message.text)
        if not 100 <= height <= 250: raise ValueError("–†–æ—Å—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        context.user_data[HEIGHT] = height
        await update.message.reply_text(text=f"–†–æ—Å—Ç: *{height} —Å–º*. –ó–∞–ø–∏—Å–∞–ª! üìù\n\n‚öñÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π *–≤–µ—Å* (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):",parse_mode=ParseMode.MARKDOWN)
        return PROFILE_WEIGHT
    except ValueError as e:
        logger.warning(f"User {update.effective_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç: {update.message.text}. –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("ü§î –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö –æ—Ç 100 –¥–æ 250 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175). –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
        return PROFILE_HEIGHT
async def handle_weight_and_ask_activity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        weight = float(update.message.text.replace(',', '.'))
        if not 30 <= weight <= 300: raise ValueError("–í–µ—Å –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        context.user_data[CURRENT_WEIGHT] = weight
        activity_buttons = [[InlineKeyboardButton("üßò‚Äç‚ôÄÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)", callback_data="–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è")], [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è –õ–µ–≥–∫–∞—è (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä/–Ω–µ–¥)", callback_data="–ª–µ–≥–∫–∞—è")], [InlineKeyboardButton("üèÉ‚Äç‚ôÄÔ∏è –°—Ä–µ–¥–Ω—è—è (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä/–Ω–µ–¥)", callback_data="—Å—Ä–µ–¥–Ω—è—è")], [InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÄÔ∏è –í—ã—Å–æ–∫–∞—è (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ 6-7 —Ä/–Ω–µ–¥)", callback_data="–≤—ã—Å–æ–∫–∞—è")], [InlineKeyboardButton("üî• –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è (—Ñ–∏–∑. —Ä–∞–±–æ—Ç–∞ + —Å–ø–æ—Ä—Ç)", callback_data="—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è")]]
        await update.message.reply_text(text=f"–í–µ—Å: *{weight} –∫–≥*. –ü—Ä–∏–Ω—è—Ç–æ! üëå\n\nü§∏‚Äç‚ôÄÔ∏è –û—Ü–µ–Ω–∏ —Å–≤–æ–π –æ–±—ã—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å *—Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*:", reply_markup=InlineKeyboardMarkup(activity_buttons), parse_mode=ParseMode.MARKDOWN)
        return PROFILE_ACTIVITY
    except ValueError as e:
        logger.warning(f"User {update.effective_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å: {update.message.text}. –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("ü§î –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 30 –¥–æ 300 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5). –î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑–æ–∫!")
        return PROFILE_WEIGHT
async def handle_activity_and_ask_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer(); context.user_data[ACTIVITY_LEVEL] = query.data
    await query.edit_message_text(text=f"–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: *{query.data.capitalize()}*. –°—É–ø–µ—Ä! üöÄ\n\nüéØ –ö–∞–∫–∞—è —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è *—Ü–µ–ª—å*?", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìâ –ü–æ—Ö—É–¥–µ—Ç—å", callback_data="–ø–æ—Ö—É–¥–µ—Ç—å")], [InlineKeyboardButton("‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å", callback_data="–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")], [InlineKeyboardButton("üí™ –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", callback_data="–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É")]]), parse_mode=ParseMode.MARKDOWN)
    return PROFILE_GOAL
async def process_final_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; user_id = update.effective_user.id
    logger.info(f"User {user_id}: Entered process_final_profile with callback_data: {query.data}")
    await query.answer(); context.user_data[GOAL] = query.data; ud = context.user_data
    logger.info(f"User {user_id}: Goal '{ud.get(GOAL)}' saved. User data before calcs: {ud}")
    try:
        required_keys = [CURRENT_WEIGHT, HEIGHT, AGE, GENDER, ACTIVITY_LEVEL, GOAL]
        missing_keys = [key for key in required_keys if ud.get(key) is None]
        if missing_keys:
            logger.error(f"User {user_id}: Missing keys for calculation: {missing_keys}")
            await query.edit_message_text("–û–π, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö. üò• /start –∑–∞–Ω–æ–≤–æ.")
            ud.pop(PROFILE_COMPLETE, None); return ConversationHandler.END
        ud[BMI] = calculate_bmi(ud.get(CURRENT_WEIGHT), ud.get(HEIGHT))
        ud[BMR] = calculate_bmr(ud.get(CURRENT_WEIGHT), ud.get(HEIGHT), ud.get(AGE), ud.get(GENDER))
        ud[TDEE] = calculate_tdee(ud.get(BMR), ud.get(ACTIVITY_LEVEL))
        ud[TARGET_CALORIES] = calculate_target_calories(ud.get(TDEE), ud.get(GOAL))
        logger.info(f"User {user_id}: Calcs complete. BMI:{ud.get(BMI)}, BMR:{ud.get(BMR)}, TDEE:{ud.get(TDEE)}, TARGET_CALORIES:{ud.get(TARGET_CALORIES)}")
        if None in [ud.get(BMI), ud.get(BMR), ud.get(TDEE), ud.get(TARGET_CALORIES)]:
            logger.error(f"User {user_id}: Calculated values are None. Data: BMI={ud.get(BMI)}, BMR={ud.get(BMR)}, TDEE={ud.get(TDEE)}, TARGET_CALORIES={ud.get(TARGET_CALORIES)}")
            await query.edit_message_text("–û–π, –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. üò• /start –∑–∞–Ω–æ–≤–æ.")
            ud.pop(PROFILE_COMPLETE, None); return ConversationHandler.END
        ud[PROFILE_COMPLETE] = True; logger.info(f"User {user_id}: PROFILE_COMPLETE set to True.")
        ud.pop(AWAITING_WEIGHT_UPDATE, None)
        weight_change_prediction_text = ""
        if ud.get(TDEE) and ud.get(TARGET_CALORIES):
            daily_diff = ud.get(TARGET_CALORIES) - ud.get(TDEE); weekly_kcal = daily_diff * 7
            weekly_kg = weekly_kcal / 7700 
            if weekly_kg < -0.05: weight_change_prediction_text = f"üìà –ü—Ä–∏ —Ç–∞–∫–æ–º —Ä–µ–∂–∏–º–µ —Ç—ã –º–æ–∂–µ—à—å —Ç–µ—Ä—è—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ *{abs(weekly_kg):.1f} –∫–≥* –≤ –Ω–µ–¥–µ–ª—é.\n"
            elif weekly_kg > 0.05: weight_change_prediction_text = f"üìà –ü—Ä–∏ —Ç–∞–∫–æ–º —Ä–µ–∂–∏–º–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–±–∏—Ä–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ *{weekly_kg:.1f} –∫–≥* –≤ –Ω–µ–¥–µ–ª—é.\n"
            else: weight_change_prediction_text = f"‚öñÔ∏è –¢–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –±–ª–∏–∑–∫–æ –∫ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—é —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞.\n"
        bmi_interp = get_bmi_interpretation(ud.get(BMI))
        summary = (f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!* –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤. –í–æ—Ç —Ç–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n\nüë§ *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n  - –ü–æ–ª: _{ud.get(GENDER, 'N/A').capitalize()}_\n  - –í–æ–∑—Ä–∞—Å—Ç: _{ud.get(AGE, 'N/A')} –ª–µ—Ç_\n  - –†–æ—Å—Ç: _{ud.get(HEIGHT, 'N/A')} —Å–º_\n  - –í–µ—Å: _{ud.get(CURRENT_WEIGHT, 'N/A')} –∫–≥_\n  - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: _{ud.get(ACTIVITY_LEVEL, 'N/A').capitalize()}_\n  - –¶–µ–ª—å: _{ud.get(GOAL, 'N/A').capitalize()}_\n\nüìä *–†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n  - –ò–ú–¢: *{ud.get(BMI, 'N/A')}*{bmi_interp}\n  - BMR (–±–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º): *{ud.get(BMR, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å*\n  - TDEE (—Å—É—Ç–æ—á–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å): *{ud.get(TDEE, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å*\n  - ‚ú® *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —Ü–µ–ª–∏:* `{ud.get(TARGET_CALORIES, 'N/A')}` *–∫–∫–∞–ª/–¥–µ–Ω—å* ‚ú®\n{weight_change_prediction_text}\n–¢–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏! –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n‚ö†Ô∏è *–ü–æ–º–Ω–∏, —ç—Ç–∏ —Ä–∞—Å—á–µ—Ç—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–æ—Å—è—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –î–ª—è —Ç–æ—á–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Å—è —Å –≤—Ä–∞—á–æ–º.*")
        await query.edit_message_text(text=summary, parse_mode=ParseMode.MARKDOWN)
        logger.info(f"User {user_id}: Profile summary sent. Exiting."); return ConversationHandler.END
    except Exception as e:
        logger.error(f"User {user_id}: ERROR in process_final_profile: {e}", exc_info=True)
        try: await query.edit_message_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. üò• –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")
        except Exception as e_fallback: logger.error(f"User {user_id}: Failed to send fallback error message: {e_fallback}")
        ud.pop(PROFILE_COMPLETE, None); return ConversationHandler.END
async def cancel_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    if not context.user_data.get(PROFILE_COMPLETE):
        logger.info(f"User {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        context.user_data.clear()
        context.user_data[LAST_MEAL_DATE] = date.today().isoformat()
        context.user_data[TODAY_MEALS] = []
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")
    else: await update.message.reply_text("üëç –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π /start (—Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω).")
    for key in ['current_meal_type', 'current_meal_description', AWAITING_WEIGHT_UPDATE]: context.user_data.pop(key, None)
    return ConversationHandler.END
# --- –ö–æ–Ω–µ—Ü –∫–æ–ø–∏–ø–∞—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ ---

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ó–ê–ü–ò–°–ò –ü–†–ò–ï–ú–û–í –ü–ò–©–ò (–∫–∞–∫ –≤ v2.7, —Å –ª–æ–≥–∞–º–∏) ---
async def add_meal_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∫–æ–¥ add_meal_start –∏–∑ v2.7, —Å –ª–æ–≥–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–Ω—è) ...
    user_id = update.effective_user.id
    logger.info(f"User {user_id}: Initiating /addmeal.")
    today_str = date.today().isoformat()
    if context.user_data.get(LAST_MEAL_DATE) != today_str:
        context.user_data[TODAY_MEALS] = []
        context.user_data[LAST_MEAL_DATE] = today_str
        logger.info(f"User {user_id}: –ù–æ–≤—ã–π –¥–µ–Ω—å, –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è /addmeal.")
        if update.message: await update.message.reply_text("‚òÄÔ∏è –ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏!")
    if not context.user_data.get(PROFILE_COMPLETE):
        msg = update.callback_query.message if update.callback_query else update.message
        await msg.reply_text("–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start üåü")
        return ConversationHandler.END
    keyboard = [[InlineKeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="meal_–ó–∞–≤—Ç—Ä–∞–∫")],[InlineKeyboardButton("ü•ó –û–±–µ–¥", callback_data="meal_–û–±–µ–¥")],[InlineKeyboardButton("üçù –£–∂–∏–Ω", callback_data="meal_–£–∂–∏–Ω")],[InlineKeyboardButton("üçé –ü–µ—Ä–µ–∫—É—Å", callback_data="meal_–ü–µ—Ä–µ–∫—É—Å")],]
    msg_text = "–ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å?"
    target_message = update.message if update.message else update.callback_query.message
    if update.callback_query and update.callback_query.message.text == msg_text: # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–º–∏ –∂–µ –∫–Ω–æ–ø–∫–∞–º–∏
        logger.info(f"User {user_id}: add_meal_start called from callback, message text is the same, not editing.")
        # –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ edit_text –Ω–µ–∂–µ–ª–∞—Ç–µ–ª–µ–Ω
        # await update.callback_query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.message.edit_text(msg_text, reply_markup=InlineKeyboardMarkup(keyboard))
    else: # update.message
        await update.message.reply_text(msg_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return ADDMEAL_CHOOSE_TYPE
async def add_meal_choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = update.effective_user.id
    logger.info(f"User {user_id}: In add_meal_choose_type, callback_data: {query.data}")
    await query.answer()
    meal_type_name = query.data.split('_')[1]
    context.user_data['current_meal_type'] = meal_type_name
    await query.edit_message_text(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º '{meal_type_name}'.\n–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ —Ç—ã —Å—ä–µ–ª(–∞) –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û–≤—Å—è–Ω–∫–∞ –Ω–∞ –º–æ–ª–æ–∫–µ 200–≥, 1 –±–∞–Ω–∞–Ω, –∫–æ—Ñ–µ'):")
    return ADDMEAL_GET_DESCRIPTION
async def add_meal_get_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∫–æ–¥ add_meal_get_description –∏–∑ v2.7, —Å –ª–æ–≥–∞–º–∏, JSON –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏ –≤—ã–∑–æ–≤–æ–º show_today_calories) ...
    meal_description = update.message.text; ud = context.user_data; current_meal_type = ud.get('current_meal_type', '–ü—Ä–∏–µ–º –ø–∏—â–∏'); user_id = update.effective_user.id
    logger.info(f"User {user_id}: In add_meal_get_description, meal_type: {current_meal_type}, description: {meal_description}")
    await update.message.reply_text(f"–ü–æ–Ω—è–ª! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è '{current_meal_type}'... ü§î –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
    profile_info = (f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å: {ud.get(TARGET_CALORIES, '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –∫–∫–∞–ª. –¢–µ–∫—É—â–∏–π –≤–µ—Å: {ud.get(CURRENT_WEIGHT, 'N/A')} –∫–≥. –¶–µ–ª—å: {ud.get(GOAL, 'N/A')}.")
    prompt = (f"{profile_info} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—ä–µ–¥–µ–Ω–Ω—É—é –ø–∏—â—É –¥–ª—è –ø—Ä–∏–µ–º–∞ '{current_meal_type}':\n'{meal_description}'\n\n–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –û—Ü–µ–Ω–∏ –ö–ë–ñ–£ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞/–±–ª—é–¥–∞. –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ –°–¢–†–û–ì–û–ú JSON —Ñ–æ—Ä–º–∞—Ç–µ (—Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ/–ø–æ—Å–ª–µ, –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ë–ñ–£ - —á–∏—Å–ª–∞):\n{{\n  \"meal_name\": \"{current_meal_type}\",\n  \"items\": [\n    {{\"name\": \"[–ü—Ä–æ–¥—É–∫—Ç 1]\", \"quantity\": \"[–ö–æ–ª-–≤–æ 1]\", \"calories\": X, \"protein\": Y, \"fat\": Z, \"carbs\": W}},\n    {{\"name\": \"[–ü—Ä–æ–¥—É–∫—Ç 2]\", \"quantity\": \"[–ö–æ–ª-–≤–æ 2]\", \"calories\": X, \"protein\": Y, \"fat\": Z, \"carbs\": W}}\n  ],\n  \"total\": {{\"calories\": X_total, \"protein\": Y_total, \"fat\": Z_total, \"carbs\": W_total}}\n}}\n–ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å, –ö–ë–ñ–£ 0 –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏, –Ω–æ –ø–æ—Å—á–∏—Ç–∞–π –∏—Ç–æ–≥ –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º. –ë—É–¥—å —Ç–æ—á–Ω—ã–º.")
    ai_response_json_str = await ask_groq(prompt, temperature=0.1)
    try:
        if ai_response_json_str.startswith("```json"): ai_response_json_str = ai_response_json_str[7:]
        if ai_response_json_str.endswith("```"): ai_response_json_str = ai_response_json_str[:-3]
        ai_response_json_str = ai_response_json_str.strip()
        logger.info(f"User {user_id}: AI response for meal: {ai_response_json_str}")
        meal_data = json.loads(ai_response_json_str)
        if not isinstance(meal_data, dict) or 'total' not in meal_data or not all(k in meal_data['total'] for k in ['calories', 'protein', 'fat', 'carbs']) or not all(isinstance(meal_data['total'][k], (int, float)) for k in ['calories', 'protein', 'fat', 'carbs']):
            raise ValueError("–û—Ç–≤–µ—Ç AI –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è total –ö–ë–ñ–£ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
        meal_data['user_description'] = meal_description; meal_data['timestamp'] = datetime.now().isoformat()
        if TODAY_MEALS not in ud or not isinstance(ud[TODAY_MEALS], list): ud[TODAY_MEALS] = []
        ud[TODAY_MEALS].append(meal_data)
        total_cals = meal_data.get('total', {}).get('calories', 0)
        response_text = f"‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ '{current_meal_type}' –∑–∞–ø–∏—Å–∞–Ω!\n–¢—ã —Å—ä–µ–ª(–∞): {meal_description}\n"
        if isinstance(meal_data.get("items"), list) and meal_data["items"]:
            response_text += "–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:\n"
            for item in meal_data["items"]: response_text += f"  - {item.get('name','?')} ({item.get('quantity','?')}) ‚âà {item.get('calories',0)} –∫–∫–∞–ª\n"
        response_text += f"–í—Å–µ–≥–æ –∑–∞ —ç—Ç–æ—Ç –ø—Ä–∏–µ–º: *{total_cals} –∫–∫–∞–ª*.\n\n"
        ud.pop('current_meal_type', None); ud.pop('current_meal_description', None)
        await show_today_calories(update, context, pre_text=response_text)
        return ConversationHandler.END
    except json.JSONDecodeError as e:
        logger.error(f"User {user_id}: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç AI –¥–ª—è –µ–¥—ã: {e}. –û—Ç–≤–µ—Ç AI: '{ai_response_json_str}'")
        await update.message.reply_text("–û–π, –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –ø–æ –∫–∞–ª–æ—Ä–∏—è–º. ü§ñ –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –±–ª—é–¥–æ –∏–Ω–∞—á–µ.")
    except ValueError as e:
        logger.error(f"User {user_id}: –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ JSON –æ—Ç AI –¥–ª—è –µ–¥—ã: {e}. –û—Ç–≤–µ—Ç AI: '{ai_response_json_str}'")
        await update.message.reply_text("AI –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"User {user_id}: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ add_meal_get_description: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.")
    ud.pop('current_meal_type', None); ud.pop('current_meal_description', None)
    return ConversationHandler.END
async def add_meal_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∫–æ–¥ add_meal_cancel –∏–∑ v2.7) ...
    user_id = update.effective_user.id
    logger.info(f"User {user_id}: –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.")
    await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.pop('current_meal_type', None)
    context.user_data.pop('current_meal_description', None)
    return ConversationHandler.END

# --- –ö–æ–º–∞–Ω–¥–∞ /todaycalories –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Å –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤) ---
async def show_today_calories(update: Update, context: ContextTypes.DEFAULT_TYPE, pre_text=""):
    # ... (–∫–æ–¥ show_today_calories –∏–∑ v2.7, –Ω–æ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è "–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π") ...
    user = update.effective_user
    today_str = date.today().isoformat()
    if context.user_data.get(LAST_MEAL_DATE) != today_str:
        context.user_data[TODAY_MEALS] = []
        context.user_data[LAST_MEAL_DATE] = today_str
        logger.info(f"User {user.id}: –ù–æ–≤—ã–π –¥–µ–Ω—å, –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è /todaycalories.")
    if not context.user_data.get(PROFILE_COMPLETE):
        msg_target = update.message if update.message else update.callback_query.message
        await msg_target.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –∫–∞–ª–æ—Ä–∏–∏. üåü")
        return
    today_meals_data = context.user_data.get(TODAY_MEALS, [])
    total_calories_today, total_protein_today, total_fat_today, total_carbs_today = 0,0,0,0
    summary_meals_text = ""
    if not today_meals_data: # –ò–°–ü–†–ê–í–õ–ï–ù–û
        summary_meals_text = "ü´ô –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /addmeal, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π!\n"
    else:
        summary_meals_text = "*–ó–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—ã —Å—ä–µ–ª(–∞):*\n"
        for meal_entry in today_meals_data:
            meal_name = meal_entry.get('meal_name', '–ü—Ä–∏–µ–º –ø–∏—â–∏')
            items_text_list = []
            if isinstance(meal_entry.get("items"), list):
                for item in meal_entry["items"]: items_text_list.append(f"  - {item.get('name','?')} ({item.get('quantity','?')}) ‚âà {item.get('calories',0)} –∫–∫–∞–ª")
            total_meal_cals = meal_entry.get('total', {}).get('calories', 0)
            total_meal_p = meal_entry.get('total', {}).get('protein', 0)
            total_meal_f = meal_entry.get('total', {}).get('fat', 0)
            total_meal_c = meal_entry.get('total', {}).get('carbs', 0)
            summary_meals_text += f"\nüçΩÔ∏è *{meal_name}* (–û–±—â: {total_meal_cals} –∫–∫–∞–ª, –ë:{total_meal_p:.1f} –ñ:{total_meal_f:.1f} –£:{total_meal_c:.1f}):\n" # –î–æ–±–∞–≤–∏–ª –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ë–ñ–£
            if items_text_list: summary_meals_text += "\n".join(items_text_list) + "\n"
            else: summary_meals_text += f"  _{meal_entry.get('user_description', '–î–µ—Ç–∞–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã')}_\n"
            total_calories_today += total_meal_cals; total_protein_today += total_meal_p; total_fat_today += total_meal_f; total_carbs_today += total_meal_c
        summary_meals_text += f"\n*üìä –ò—Ç–æ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n  –ö–∫–∞–ª: *{total_calories_today}*,\n  –ë–µ–ª–∫–∏: {total_protein_today:.1f} –≥,\n  –ñ–∏—Ä—ã: {total_fat_today:.1f} –≥,\n  –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs_today:.1f} –≥\n"
    target_cals = context.user_data.get(TARGET_CALORIES)
    remaining_cals_text = ""
    if target_cals is not None and isinstance(target_cals, (int, float)):
        remaining = target_cals - total_calories_today
        if remaining >= 0: remaining_cals_text = f"\nüéØ –¢–≤–æ—è —Ü–µ–ª—å –Ω–∞ –¥–µ–Ω—å: *{target_cals} –∫–∫–∞–ª*.\n‚ú® –û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Ç—Ä–µ–±–∏—Ç—å: *{remaining:.0f} –∫–∫–∞–ª*."
        else: remaining_cals_text = f"\nüéØ –¢–≤–æ—è —Ü–µ–ª—å –Ω–∞ –¥–µ–Ω—å: *{target_cals} –∫–∫–∞–ª*.\nüî¥ –ü–µ—Ä–µ–±–æ—Ä: *{abs(remaining):.0f} –∫–∫–∞–ª*!"
    full_response = pre_text + summary_meals_text + remaining_cals_text
    message_target = update.message if update.message else update.callback_query.message
    await message_target.reply_text(full_response, parse_mode=ParseMode.MARKDOWN)
async def today_calories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_today_calories(update, context)

# --- –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∫–∞–∫ –≤ v2.7, —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–µ–Ω—é –∏ help) ---
# (–í—Å—Ç–∞–≤—å —Å—é–¥–∞ menu_command, help_command, my_profile_command, weight_command_entry, train_command_entry, handle_train_location_and_generate –∏–∑ v2.7)
# --- –ö–æ–ø–∏–ø–∞—Å—Ç–∞ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ö–∞–∫ –≤ v2.7
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –ù–∞–∂–º–∏ /start üòä", parse_mode=ParseMode.MARKDOWN)
        return
    menu_buttons = [[KeyboardButton("‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É (/addmeal)"), KeyboardButton("üóìÔ∏è –ú–æ–∏ –∫–∞–ª–æ—Ä–∏–∏ (/todaycalories)")],[KeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (/train)"), KeyboardButton("‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å (/weight)")],[KeyboardButton("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å (/myprofile)"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å (/help)")],]
    await update.message.reply_text("üëá –í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å:", reply_markup=ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True, one_time_keyboard=False))
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ö–∞–∫ –≤ v2.7
    help_text = ("üëã –ü—Ä–∏–≤–µ—Ç! –Ø *–§–∏—Ç–ì—É—Ä—É* ‚Äì —Ç–≤–æ–π –≥–∏–¥ –≤ –º–∏—Ä–µ —Ñ–∏—Ç–Ω–µ—Å–∞ –∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.\n\nüìå *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.\n/myprofile - –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.\n/train - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n/weight - –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å.\n/addmeal - –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏.\n/todaycalories - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏ –ø–æ –ö–ë–ñ–£ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n/cancel - (–í–æ –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞) –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.\n/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\nü§ñ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏, —Ä–∞—Å—á–µ—Ç–æ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø–∏—Å—å—é –ø–∏—Ç–∞–Ω–∏—è!")
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
async def my_profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ö–∞–∫ –≤ v2.7
    # ... (–∫–æ–¥ my_profile_command –∏–∑ v2.7) ...
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start üåü")
        return
    ud = context.user_data; bmi_interp = get_bmi_interpretation(ud.get(BMI)); weight_change_prediction_text = ""
    if ud.get(TDEE) and ud.get(TARGET_CALORIES):
        daily_deficit_or_surplus = ud.get(TARGET_CALORIES) - ud.get(TDEE); weekly_change_kcal = daily_deficit_or_surplus * 7
        weekly_weight_change_kg = weekly_change_kcal / 7700 
        if weekly_weight_change_kg < -0.05: weight_change_prediction_text = f"üìà –ü—Ä–æ–≥–Ω–æ–∑: *{abs(weekly_weight_change_kg):.1f} –∫–≥/–Ω–µ–¥.* –≤ –º–∏–Ω—É—Å\n"
        elif weekly_weight_change_kg > 0.05: weight_change_prediction_text = f"üìà –ü—Ä–æ–≥–Ω–æ–∑: *{weekly_weight_change_kg:.1f} –∫–≥/–Ω–µ–¥.* –≤ –ø–ª—é—Å\n"
    summary = (f"üë§ *–¢–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—å, {update.effective_user.first_name}:*\n\n  - –ü–æ–ª: _{ud.get(GENDER, 'N/A').capitalize()}_\n  - –í–æ–∑—Ä–∞—Å—Ç: _{ud.get(AGE, 'N/A')} –ª–µ—Ç_\n  - –†–æ—Å—Ç: _{ud.get(HEIGHT, 'N/A')} —Å–º_\n  - –í–µ—Å: *{ud.get(CURRENT_WEIGHT, 'N/A')} –∫–≥*\n  - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: _{ud.get(ACTIVITY_LEVEL, 'N/A').capitalize()}_\n  - –¶–µ–ª—å: _{ud.get(GOAL, 'N/A').capitalize()}_\n\nüìä *–†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n  - –ò–ú–¢: *{ud.get(BMI, 'N/A')}*{bmi_interp}\n  - BMR: *{ud.get(BMR, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å*\n  - TDEE: *{ud.get(TDEE, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å*\n  - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏: `{ud.get(TARGET_CALORIES, 'N/A')}` *–∫–∫–∞–ª/–¥–µ–Ω—å*\n{weight_change_prediction_text}\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π /weight. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ /start (—Å—Ç–∞—Ä—ã–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω).")
    await update.message.reply_text(summary, parse_mode=ParseMode.MARKDOWN)
async def weight_command_entry(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ö–∞–∫ –≤ v2.7
    # ... (–∫–æ–¥ weight_command_entry –∏–∑ v2.7) ...
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –ù–∞–∂–º–∏ /start üòä")
        return
    await update.message.reply_text("‚öñÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π *—Ç–µ–∫—É—â–∏–π –≤–µ—Å* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):", parse_mode=ParseMode.MARKDOWN)
    context.user_data[AWAITING_WEIGHT_UPDATE] = True
async def handle_weight_update(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ö–∞–∫ –≤ v2.7
    # ... (–∫–æ–¥ handle_weight_update –∏–∑ v2.7) ...
    try:
        new_weight = float(update.message.text.replace(',', '.'))
        if not 30 <= new_weight <= 300: raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å")
        ud = context.user_data
        if not all(ud.get(key) for key in [HEIGHT, AGE, GENDER, ACTIVITY_LEVEL, GOAL]):
            logger.error(f"User {update.effective_user.id}: Missing profile data for weight update recalcs.")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π /myprofile –∏–ª–∏ /start.")
            ud.pop(AWAITING_WEIGHT_UPDATE, None); return
        ud[CURRENT_WEIGHT] = new_weight; ud[BMI] = calculate_bmi(new_weight, ud.get(HEIGHT)); ud[BMR] = calculate_bmr(new_weight, ud.get(HEIGHT), ud.get(AGE), ud.get(GENDER)); ud[TDEE] = calculate_tdee(ud.get(BMR), ud.get(ACTIVITY_LEVEL)); ud[TARGET_CALORIES] = calculate_target_calories(ud.get(TDEE), ud.get(GOAL))
        ud.pop(AWAITING_WEIGHT_UPDATE, None); bmi_interp = get_bmi_interpretation(ud.get(BMI)); weight_change_prediction_text = ""
        if ud.get(TDEE) and ud.get(TARGET_CALORIES):
            daily_deficit_or_surplus = ud.get(TARGET_CALORIES) - ud.get(TDEE); weekly_change_kcal = daily_deficit_or_surplus * 7
            weekly_weight_change_kg = weekly_change_kcal / 7700 
            if weekly_weight_change_kg < -0.05: weight_change_prediction_text = f"üìà –ü—Ä–æ–≥–Ω–æ–∑: *{abs(weekly_weight_change_kg):.1f} –∫–≥/–Ω–µ–¥.* –≤ –º–∏–Ω—É—Å\n"
            elif weekly_weight_change_kg > 0.05: weight_change_prediction_text = f"üìà –ü—Ä–æ–≥–Ω–æ–∑: *{weekly_weight_change_kg:.1f} –∫–≥/–Ω–µ–¥.* –≤ –ø–ª—é—Å\n"
        await update.message.reply_text(f"‚úÖ –í–µ—Å *{new_weight} –∫–≥* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã:\n  - –ò–ú–¢: *{ud.get(BMI, 'N/A')}*{bmi_interp}\n  - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏: `{ud.get(TARGET_CALORIES, 'N/A')}` *–∫–∫–∞–ª/–¥–µ–Ω—å*\n{weight_change_prediction_text}",parse_mode=ParseMode.MARKDOWN)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ–±–Ω–æ–≤–∏–ª –≤–µ—Å: {new_weight} –∫–≥.")
    except ValueError: await update.message.reply_text("ü§î –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ /weight –∏–ª–∏ –≤–≤–µ–¥–∏ –≤–µ—Å —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_weight_update: {e}", exc_info=True)
        await update.message.reply_text("üí• –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞.")
        context.user_data.pop(AWAITING_WEIGHT_UPDATE, None)
async def train_command_entry(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ö–∞–∫ –≤ v2.6
    # ... (–∫–æ–¥ train_command_entry –∏–∑ v2.6) ...
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞—á–Ω–∏ —Å /start üåü", parse_mode=ParseMode.MARKDOWN)
        return
    keyboard = [[InlineKeyboardButton("üè† –î–æ–º–∞ (–±–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)", callback_data="train_home")], [InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –í –∑–∞–ª–µ", callback_data="train_gym")], [InlineKeyboardButton("üå≥ –ù–∞ —É–ª–∏—Ü–µ", callback_data="train_street")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_to_reply = update.message if update.message else update.callback_query.message
    await message_to_reply.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ì–¥–µ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?", reply_markup=reply_markup)
async def handle_train_location_and_generate(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ö–∞–∫ –≤ v2.6
    # ... (–∫–æ–¥ handle_train_location_and_generate –∏–∑ v2.6) ...
    query = update.callback_query; await query.answer(); user_id = update.effective_user.id 
    logger.info(f"User {user_id}: –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤—ã–±–æ—Ä: {query.data}"); location_choice = query.data
    location_text, equipment_text = "", ""
    if location_choice == "train_home": location_text, equipment_text = "–¥–ª—è –¥–æ–º–∞", "–±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
    elif location_choice == "train_gym": location_text, equipment_text = "–¥–ª—è —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–≥–æ –∑–∞–ª–∞", "—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞–ª–∞"
    elif location_choice == "train_street": location_text, equipment_text = "–¥–ª—è —É–ª–∏—Ü—ã", "—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ"
    ud = context.user_data
    profile_info = (f"–í–ê–ñ–ù–û: –≠—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö: –ü–æ–ª:{ud.get(GENDER,'N/A')}, –í–æ–∑—Ä–∞—Å—Ç:{ud.get(AGE,'N/A')}, –†–æ—Å—Ç:{ud.get(HEIGHT,'N/A')}—Å–º, –í–µ—Å:{ud.get(CURRENT_WEIGHT,'N/A')}–∫–≥, –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:{ud.get(ACTIVITY_LEVEL,'N/A')}, –¶–µ–ª—å:{ud.get(GOAL,'N/A')}. –ò–ú–¢:{ud.get(BMI,'N/A')}, –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —Ü–µ–ª–∏:{ud.get(TARGET_CALORIES,'N/A')}. –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–æ–≤–∞, –æ–Ω–∏ —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.")
    prompt = (f"{profile_info} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É {location_text}, {equipment_text}. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ—á–µ–Ω—å –≥—Ä–∞–º–æ—Ç–Ω—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —á–µ—Ç–∫–æ —É–∫–∞–∂–∏:\n1. *–ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è* (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, –±–µ–∑ Markdown –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º).\n2. –¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –ö—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).\n3. –ü–æ–¥—Ö–æ–¥—ã: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3-4).\n4. –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–∞–∂–¥–æ–º –ø–æ–¥—Ö–æ–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10-15 –∏–ª–∏ –¥–æ –æ–∫–æ–ª–æ –æ—Ç–∫–∞–∑–∞).\n5. –û—Ç–¥—ã—Ö: –í—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60-90 —Å–µ–∫—É–Ω–¥).\n–ù–µ –æ–±—Å—É–∂–¥–∞–π —Ä–∞–±–æ—á–∏–π –≤–µ—Å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–ª–µ –∏–ª–∏ –Ω–µ –ø—Ä–æ—Å–∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ. –†–∞–∑–¥–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ —Å–µ–∫—Ü–∏–∏: '## –†–∞–∑–º–∏–Ω–∫–∞ (5-7 –º–∏–Ω—É—Ç)', '## –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (20-30 –º–∏–Ω—É—Ç)', '## –ó–∞–º–∏–Ω–∫–∞ (5 –º–∏–Ω—É—Ç)'. –ò—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ Markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏. –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞–±–∑–∞—Ü–µ–º, —á–µ—Ç–∫–æ —É–∫–∞–∂–∏: 'üî• –ü—Ä–∏–º–µ—Ä–Ω–æ —Å–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π –∑–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: X-Y –∫–∫–∞–ª.'. –ó–∞–º–µ–Ω–∏ X-Y –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É. –°—Ç–∏–ª—å ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä. –û—Ç–≤–µ—Ç —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω —Å Markdown (—Å–ø–∏—Å–∫–∏ -, –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç *).")
    await query.edit_message_text("üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–¥–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è *–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É*... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.", parse_mode=ParseMode.MARKDOWN)
    logger.info(f"User {user_id}: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ AI...")
    reply = await ask_groq(prompt, temperature=0.45)
    if reply and not any(err_word in reply for err_word in ["–û—à–∏–±–∫–∞", "–£–ø—Å", "–ò–∑–≤–∏–Ω–∏", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é", "–Ω–µ –º–æ–≥—É", "–Ω–µ —É–¥–∞–ª–æ—Å—å"]):
        logger.info(f"User {user_id}: –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        await query.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)
    else:
        logger.warning(f"User {user_id}: AI –≤–µ—Ä–Ω—É–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –æ—à–∏–±–∫—É, –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç: {reply}")
        await query.message.reply_text(reply if reply else "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.MARKDOWN)
# --- –ö–æ–Ω–µ—Ü –∫–æ–ø–∏–ø–∞—Å—Ç—ã –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∫ –≤ v2.7) ---
async def general_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ general_message_handler –∏–∑ v2.7, —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é) ...
    user_message = update.message.text
    if user_message == "‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É (/addmeal)": await add_meal_start(update, context); return
    if user_message == "üóìÔ∏è –ú–æ–∏ –∫–∞–ª–æ—Ä–∏–∏ (/todaycalories)": await today_calories_command(update, context); return
    if user_message == "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (/train)": await train_command_entry(update, context); return
    if user_message == "‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å (/weight)": await weight_command_entry(update, context); return
    if user_message == "üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å (/myprofile)": await my_profile_command(update, context); return
    if user_message == "‚ùì –ü–æ–º–æ—â—å (/help)": await help_command(update, context); return
    if context.user_data.get(AWAITING_WEIGHT_UPDATE) is True: await handle_weight_update(update, context); return
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id} ({update.effective_user.username}): '{user_message}'. AI –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω.")
    await update.message.reply_text("ü§ñ –•–º, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏—Å–ø–æ–ª—å–∑—É–π /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤ /menu. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏, —Ä–∞—Å—á–µ—Ç–æ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø–∏—Å—å—é —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! üòä", parse_mode=ParseMode.MARKDOWN)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–∫–∞–∫ –≤ v2.7, —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º add_meal_conv_handler) ---
def main():
    if not TELEGRAM_TOKEN: logger.critical("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è."); return
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    onboarding_conv_handler = ConversationHandler(entry_points=[CommandHandler("start", start_command)], states={PROFILE_GENDER: [CallbackQueryHandler(handle_gender_and_ask_age, pattern="^(–º—É–∂—Å–∫–æ–π|–∂–µ–Ω—Å–∫–∏–π)$")], PROFILE_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_age_and_ask_height)], PROFILE_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_height_and_ask_weight)], PROFILE_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_weight_and_ask_activity)], PROFILE_ACTIVITY: [CallbackQueryHandler(handle_activity_and_ask_goal, pattern="^(–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è|–ª–µ–≥–∫–∞—è|—Å—Ä–µ–¥–Ω—è—è|–≤—ã—Å–æ–∫–∞—è|—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è)$")], PROFILE_GOAL: [CallbackQueryHandler(process_final_profile, pattern="^(–ø–æ—Ö—É–¥–µ—Ç—å|–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å|–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É)$")],}, fallbacks=[CommandHandler("cancel", cancel_onboarding), CommandHandler("start", start_command)], allow_reentry=True, per_user=True, per_chat=True,)
    app.add_handler(onboarding_conv_handler)
    add_meal_conv_handler = ConversationHandler(entry_points=[CommandHandler("addmeal", add_meal_start)], states={ADDMEAL_CHOOSE_TYPE: [CallbackQueryHandler(add_meal_choose_type, pattern="^meal_(–ó–∞–≤—Ç—Ä–∞–∫|–û–±–µ–¥|–£–∂–∏–Ω|–ü–µ—Ä–µ–∫—É—Å)$")], ADDMEAL_GET_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_meal_get_description)],}, fallbacks=[CommandHandler("cancel", add_meal_cancel)], per_user=True, per_chat=True,)
    app.add_handler(add_meal_conv_handler)
    app.add_handler(CommandHandler("train", train_command_entry))
    app.add_handler(CallbackQueryHandler(handle_train_location_and_generate, pattern="^train_(home|gym|street)$"))
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("myprofile", my_profile_command))
    app.add_handler(CommandHandler("weight", weight_command_entry))
    app.add_handler(CommandHandler("todaycalories", today_calories_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, general_message_handler))
    logger.info("ü§ñ –ë–æ—Ç –§–∏—Ç–ì—É—Ä—É v2.7 (—Å –∑–∞–ø–∏—Å—å—é –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()