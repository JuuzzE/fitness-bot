import logging
import os
import httpx
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ .env —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) ---
# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º:
# GROQ_API_KEY=" –≤–∞—à_gsk_–∫–ª—é—á "
# TELEGRAM_TOKEN=" –≤–∞—à_telegram_—Ç–æ–∫–µ–Ω "
# from dotenv import load_dotenv
# load_dotenv() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .env –ª–æ–∫–∞–ª—å–Ω–æ

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

if not GROQ_API_KEY or not TELEGRAM_TOKEN:
    logger.critical(
        "–ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GROQ_API_KEY –∏ TELEGRAM_TOKEN –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
    )
    # exit(1) # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –±–µ–∑ –∫–ª—é—á–µ–π

# --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI ---
SYSTEM_PROMPT_DIETITIAN = """
–¢—ã ‚Äî –§–∏—Ç–ì—É—Ä—É, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Ä–æ–ª—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∞ –∏ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä–∞.
–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ñ–∏—Ç–Ω–µ—Å–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º.
–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—â–µ–Ω–∏–∏ —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ–ª–Ω—ã–π) —Ç—ã –¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–æ—Å—Ç, –≤–µ—Å, —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ü–µ–ª–∏), —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å. –û–±—ä—è—Å–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ.
–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –ò–ú–¢, –±–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º, —Å—É—Ç–æ—á–Ω—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤—å —ç—Ç–∏ —Ä–∞—Å—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø–æ–Ω—è—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ.
–ò—Å–ø–æ–ª—å–∑—É–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤, –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, —ç–º–ø–∞—Ç–∏—á–Ω—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–û–±—â–∞–π—Å—è –Ω–∞ "—Ç—ã".
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Ç–≤–æ–µ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∫–∞–∫ –¥–∏–µ—Ç–æ–ª–æ–≥–∞/—Ç—Ä–µ–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∏–∞–≥–Ω–æ–∑), –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏ –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.
"""

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
(PROFILE_GENDER, PROFILE_AGE, PROFILE_HEIGHT, PROFILE_WEIGHT,
 PROFILE_ACTIVITY, PROFILE_GOAL, PROFILE_PROCESS) = range(7)

# --- –ö–ª—é—á–∏ –¥–ª—è context.user_data ---
GENDER, AGE, HEIGHT, CURRENT_WEIGHT, ACTIVITY_LEVEL, GOAL = \
    "gender", "age", "height", "current_weight", "activity_level", "goal"
PROFILE_COMPLETE = "profile_complete"
BMI, BMR, TDEE, TARGET_CALORIES = "bmi", "bmr", "tdee", "target_calories"

AWAITING_WEIGHT_UPDATE = "awaiting_weight_update"

# --- –§–∞–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ ---
ACTIVITY_FACTORS = {
    "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è": 1.2, "–ª–µ–≥–∫–∞—è": 1.375, "—Å—Ä–µ–¥–Ω—è—è": 1.55,
    "–≤—ã—Å–æ–∫–∞—è": 1.725, "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è": 1.9
}
GOAL_FACTORS = {"–ø–æ—Ö—É–¥–µ—Ç—å": -500, "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å": 0, "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": 300}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ ---
def calculate_bmi(weight_kg, height_cm):
    if not weight_kg or not height_cm or height_cm == 0: return None
    return round(weight_kg / ((height_cm / 100) ** 2), 1)

def calculate_bmr(weight_kg, height_cm, age_years, gender_str):
    if not all([weight_kg, height_cm, age_years, gender_str]): return None
    gender_str = gender_str.lower()
    if gender_str == "–º—É–∂—Å–∫–æ–π":
        return round((10 * weight_kg) + (6.25 * height_cm) - (5 * age_years) + 5)
    elif gender_str == "–∂–µ–Ω—Å–∫–∏–π":
        return round((10 * weight_kg) + (6.25 * height_cm) - (5 * age_years) - 161)
    return None

def calculate_tdee(bmr, activity_level_str):
    if not bmr or not activity_level_str: return None
    factor = ACTIVITY_FACTORS.get(activity_level_str.lower())
    return round(bmr * factor) if factor else None

def calculate_target_calories(tdee, goal_str):
    if not tdee or not goal_str: return None
    adjustment = GOAL_FACTORS.get(goal_str.lower())
    return tdee + adjustment if adjustment is not None else None

def get_bmi_interpretation(bmi):
    if bmi is None: return ""
    if bmi < 18.5: return " (–î–µ—Ñ–∏—Ü–∏—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞)"
    if bmi < 25: return " (–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å)"
    if bmi < 30: return " (–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å)"
    return " (–û–∂–∏—Ä–µ–Ω–∏–µ)"

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Groq API ---
async def ask_groq(user_message: str, model: str = "mixtral-8x7b-32768", system_prompt_override: str = None):
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}
    current_system_prompt = system_prompt_override if system_prompt_override else SYSTEM_PROMPT_DIETITIAN
    data = {
        "messages": [
            {"role": "system", "content": current_system_prompt},
            {"role": "user", "content": user_message}
        ],
        "model": model
    }
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://api.groq.com/openai/v1/chat/completions", headers=headers, json=data, timeout=45.0
            )
            response.raise_for_status()
            response_data = response.json()
            if response_data.get("choices") and response_data["choices"][0].get("message"):
                return response_data["choices"][0]["message"]["content"]
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq: {response_data}")
            return "–ò–∑–≤–∏–Ω–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."
    except httpx.HTTPStatusError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –æ—Ç Groq: {e.response.status_code} - {e.response.text}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI (–∫–æ–¥: {e.response.status_code})."
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq: {e}")
        return "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI."
    except (KeyError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Groq: {e}")
        return "–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI."
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ ask_groq: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è ConversationHandler (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è) ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /train, /weight, /myprofile –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å."
        )
        return ConversationHandler.END

    context.user_data.clear() # –û—á–∏—â–∞–µ–º –Ω–∞ —Å–ª—É—á–∞–π –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –§–∏—Ç–ì—É—Ä—É, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–¥–∏–µ—Ç–æ–ª–æ–≥ –∏ —Ç—Ä–µ–Ω–µ—Ä. üí™\n\n"
        "–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ. "
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="–º—É–∂—Å–∫–æ–π")],
            [InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="–∂–µ–Ω—Å–∫–∏–π")]
        ])
    )
    return PROFILE_GENDER

async def handle_gender_and_ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data[GENDER] = query.data
    await query.edit_message_text(text=f"–ü–æ–ª: {query.data.capitalize()}. –ü–æ–Ω—è–ª.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):")
    return PROFILE_AGE

async def handle_age_and_ask_height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        age = int(update.message.text)
        if not 10 <= age <= 100: raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
        context.user_data[AGE] = age
        await update.message.reply_text(f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç. –û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")
        return PROFILE_HEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25).")
        return PROFILE_AGE

async def handle_height_and_ask_weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        height = int(update.message.text)
        if not 100 <= height <= 250: raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç")
        context.user_data[HEIGHT] = height
        await update.message.reply_text(f"–†–æ—Å—Ç: {height} —Å–º. –ó–∞–ø–∏—Å–∞–ª!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
        return PROFILE_WEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–æ—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175).")
        return PROFILE_HEIGHT

async def handle_weight_and_ask_activity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        weight = float(update.message.text.replace(',', '.'))
        if not 30 <= weight <= 300: raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å")
        context.user_data[CURRENT_WEIGHT] = weight
        activity_buttons = [
            [InlineKeyboardButton(label.capitalize(), callback_data=key)]
            for key, label in {
                "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)",
                "–ª–µ–≥–∫–∞—è": "–õ–µ–≥–∫–∞—è (–ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä/–Ω–µ–¥)",
                "—Å—Ä–µ–¥–Ω—è—è": "–°—Ä–µ–¥–Ω—è—è (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä/–Ω–µ–¥)",
                "–≤—ã—Å–æ–∫–∞—è": "–í—ã—Å–æ–∫–∞—è (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä/–Ω–µ–¥)",
                "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è (—Ç—è–∂–µ–ª–∞—è —Ñ–∏–∑. —Ä–∞–±–æ—Ç–∞ + —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)"
            }.items()
        ] # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –∫–æ–¥–µ
        await update.message.reply_text(
            f"–í–µ—Å: {weight} –∫–≥. –ü—Ä–∏–Ω—è—Ç–æ!\n–û—Ü–µ–Ω–∏ —Å–≤–æ–π –æ–±—ã—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=InlineKeyboardMarkup(activity_buttons)
        )
        return PROFILE_ACTIVITY
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5).")
        return PROFILE_WEIGHT

async def handle_activity_and_ask_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data[ACTIVITY_LEVEL] = query.data
    await query.edit_message_text(
        text=f"–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {query.data.capitalize()}. –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!\n–ö–∞–∫–∞—è —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å üìâ", callback_data="–ø–æ—Ö—É–¥–µ—Ç—å")],
            [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å ‚öñÔ∏è", callback_data="–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")],
            [InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É üí™", callback_data="–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É")]
        ])
    )
    return PROFILE_GOAL

async def process_final_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data[GOAL] = query.data
    ud = context.user_data

    # –†–∞—Å—á–µ—Ç—ã
    ud[BMI] = calculate_bmi(ud.get(CURRENT_WEIGHT), ud.get(HEIGHT))
    ud[BMR] = calculate_bmr(ud.get(CURRENT_WEIGHT), ud.get(HEIGHT), ud.get(AGE), ud.get(GENDER))
    ud[TDEE] = calculate_tdee(ud.get(BMR), ud.get(ACTIVITY_LEVEL))
    ud[TARGET_CALORIES] = calculate_target_calories(ud.get(TDEE), ud.get(GOAL))
    ud[PROFILE_COMPLETE] = True

    bmi_interp = get_bmi_interpretation(ud.get(BMI))
    summary = (
        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í–æ—Ç —Ç–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n\n"
        f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**\n"
        f"  - –ü–æ–ª: {ud.get(GENDER, 'N/A').capitalize()}\n"
        f"  - –í–æ–∑—Ä–∞—Å—Ç: {ud.get(AGE, 'N/A')} –ª–µ—Ç\n"
        f"  - –†–æ—Å—Ç: {ud.get(HEIGHT, 'N/A')} —Å–º\n"
        f"  - –í–µ—Å: {ud.get(CURRENT_WEIGHT, 'N/A')} –∫–≥\n"
        f"  - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {ud.get(ACTIVITY_LEVEL, 'N/A').capitalize()}\n"
        f"  - –¶–µ–ª—å: {ud.get(GOAL, 'N/A').capitalize()}\n\n"
        f"üìä **–†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        f"  - –ò–ú–¢: {ud.get(BMI, 'N/A')}{bmi_interp}\n"
        f"  - –ë–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (BMR): {ud.get(BMR, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
        f"  - –°—É—Ç–æ—á–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å (TDEE): {ud.get(TDEE, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
        f"  - ‚ú® **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —Ü–µ–ª–∏: {ud.get(TARGET_CALORIES, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å** ‚ú®\n\n"
        "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π:\n"
        "/myprofile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/train - –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/weight - –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ñ–∏—Ç–Ω–µ—Å—É.\n\n"
        "‚ö†Ô∏è *–ü–æ–º–Ω–∏, —ç—Ç–∏ —Ä–∞—Å—á–µ—Ç—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã. –î–ª—è —Ç–æ—á–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≤—Ä–∞—á—É.*"
    )
    await query.edit_message_text(text=summary, parse_mode='Markdown')
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—Ñ–∏–ª—å: {ud}")
    return ConversationHandler.END

async def cancel_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")
    context.user_data.clear()
    return ConversationHandler.END

# --- –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-—Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –∏ –¥–∏–µ—Ç–æ–ª–æ–≥ –§–∏—Ç–ì—É—Ä—É. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å/–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "/myprofile - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.\n"
        "/train - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
        "/weight - –ó–∞–ø–∏—Å–∞—Ç—å (–æ–±–Ω–æ–≤–∏—Ç—å) —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å.\n"
        "/cancel - (–í–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è) –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ï—Å–ª–∏ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏—Ç–Ω–µ—Å–µ, –ø–∏—Ç–∞–Ω–∏–∏ –∏–ª–∏ –∫–∞–ª–æ—Ä–∏—è—Ö!"
    )
    await update.message.reply_text(help_text)

async def my_profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    ud = context.user_data
    bmi_interp = get_bmi_interpretation(ud.get(BMI))
    summary = (
        f"–í–æ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, {update.effective_user.first_name}:\n\n"
        f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**\n"
        f"  - –ü–æ–ª: {ud.get(GENDER, 'N/A').capitalize()}\n"
        f"  - –í–æ–∑—Ä–∞—Å—Ç: {ud.get(AGE, 'N/A')} –ª–µ—Ç\n"
        f"  - –†–æ—Å—Ç: {ud.get(HEIGHT, 'N/A')} —Å–º\n"
        f"  - –í–µ—Å: {ud.get(CURRENT_WEIGHT, 'N/A')} –∫–≥\n"
        f"  - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {ud.get(ACTIVITY_LEVEL, 'N/A').capitalize()}\n"
        f"  - –¶–µ–ª—å: {ud.get(GOAL, 'N/A').capitalize()}\n\n"
        f"üìä **–†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        f"  - –ò–ú–¢: {ud.get(BMI, 'N/A')}{bmi_interp}\n"
        f"  - BMR: {ud.get(BMR, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
        f"  - TDEE: {ud.get(TDEE, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
        f"  - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {ud.get(TARGET_CALORIES, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /weight –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞ –∏–ª–∏ /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ (—Å—Ç–∞—Ä—ã–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω)."
    )
    await update.message.reply_text(summary, parse_mode='Markdown')

async def weight_command_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
    context.user_data[AWAITING_WEIGHT_UPDATE] = True

async def handle_weight_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        new_weight = float(update.message.text.replace(',', '.'))
        if not 30 <= new_weight <= 300: raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å")

        ud = context.user_data
        ud[CURRENT_WEIGHT] = new_weight
        # –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        ud[BMI] = calculate_bmi(new_weight, ud.get(HEIGHT))
        ud[BMR] = calculate_bmr(new_weight, ud.get(HEIGHT), ud.get(AGE), ud.get(GENDER))
        ud[TDEE] = calculate_tdee(ud.get(BMR), ud.get(ACTIVITY_LEVEL))
        ud[TARGET_CALORIES] = calculate_target_calories(ud.get(TDEE), ud.get(GOAL))
        
        ud.pop(AWAITING_WEIGHT_UPDATE, None) # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
        bmi_interp = get_bmi_interpretation(ud.get(BMI))
        await update.message.reply_text(
            f"‚öñÔ∏è –í–µ—Å {new_weight} –∫–≥ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã:\n"
            f"  - –ò–ú–¢: {ud.get(BMI, 'N/A')}{bmi_interp}\n"
            f"  - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {ud.get(TARGET_CALORIES, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å",
            parse_mode='Markdown'
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ–±–Ω–æ–≤–∏–ª –≤–µ—Å: {new_weight} –∫–≥.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ /weight –∏–ª–∏ –≤–≤–µ–¥–∏ –≤–µ—Å —Å–Ω–æ–≤–∞.")
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –ø—ã—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –∫–∞–∫ –≤–µ—Å

async def train_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–î–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞—á–Ω–∏ —Å /start.")
        return

    ud = context.user_data
    profile_info = (
        f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ü–æ–ª: {ud.get(GENDER)}, –í–æ–∑—Ä–∞—Å—Ç: {ud.get(AGE)}, "
        f"–†–æ—Å—Ç: {ud.get(HEIGHT)}—Å–º, –í–µ—Å: {ud.get(CURRENT_WEIGHT)}–∫–≥, "
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {ud.get(ACTIVITY_LEVEL)}, –¶–µ–ª—å: {ud.get(GOAL)}. "
        f"–ï–≥–æ –ò–ú–¢: {ud.get(BMI, 'N/A')}, –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {ud.get(TARGET_CALORIES, 'N/A')}."
    )
    prompt = (
        f"{profile_info} –°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫—É—é (20-30 –º–∏–Ω) –¥–æ–º–∞—à–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–ª–∞ "
        "–±–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ—Ñ–∏–ª—å. –£–∫–∞–∂–∏ –ø–æ–¥—Ö–æ–¥—ã, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —Å–æ–≤–µ—Ç—ã."
    )
    await update.message.reply_text("üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–¥–±–∏—Ä–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É...")
    reply = await ask_groq(prompt)
    await update.message.reply_text(reply)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def general_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get(AWAITING_WEIGHT_UPDATE):
        await handle_weight_update(update, context)
        return

    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text(
            "–ü–æ—Ö–æ–∂–µ, —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã —è –º–æ–≥ —Ç–µ–±–µ –ø–æ–º–æ—á—å. üòä"
        )
        return

    user_message = update.message.text
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}: {user_message}")
    
    ud = context.user_data
    profile_info = (
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è): "
        f"–ü–æ–ª: {ud.get(GENDER)}, –í–æ–∑—Ä–∞—Å—Ç: {ud.get(AGE)}, "
        f"–†–æ—Å—Ç: {ud.get(HEIGHT)}—Å–º, –í–µ—Å: {ud.get(CURRENT_WEIGHT)}–∫–≥, "
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {ud.get(ACTIVITY_LEVEL)}, –¶–µ–ª—å: {ud.get(GOAL)}. "
        f"–ò–ú–¢: {ud.get(BMI, 'N/A')}, BMR: {ud.get(BMR, 'N/A')} –∫–∫–∞–ª, TDEE: {ud.get(TDEE, 'N/A')} –∫–∫–∞–ª, "
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {ud.get(TARGET_CALORIES, 'N/A')} –∫–∫–∞–ª. "
        "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: "
    )
    full_prompt = f"{profile_info}{user_message}"

    await update.message.reply_text("ü§î –î—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
    reply = await ask_groq(full_prompt)
    await update.message.reply_text(reply)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    if not TELEGRAM_TOKEN: return

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    onboarding_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            PROFILE_GENDER: [CallbackQueryHandler(handle_gender_and_ask_age, pattern="^(–º—É–∂—Å–∫–æ–π|–∂–µ–Ω—Å–∫–∏–π)$")],
            PROFILE_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_age_and_ask_height)],
            PROFILE_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_height_and_ask_weight)],
            PROFILE_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_weight_and_ask_activity)],
            PROFILE_ACTIVITY: [CallbackQueryHandler(handle_activity_and_ask_goal, pattern="^(–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è|–ª–µ–≥–∫–∞—è|—Å—Ä–µ–¥–Ω—è—è|–≤—ã—Å–æ–∫–∞—è|—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è)$")],
            PROFILE_GOAL: [CallbackQueryHandler(process_final_profile, pattern="^(–ø–æ—Ö—É–¥–µ—Ç—å|–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å|–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É)$")],
        },
        fallbacks=[CommandHandler("cancel", cancel_onboarding)],
        per_user=True, # –í–∞–∂–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –≤ user_data
        per_chat=True,
    )
    app.add_handler(onboarding_conv_handler)

    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("myprofile", my_profile_command))
    app.add_handler(CommandHandler("weight", weight_command_entry))
    app.add_handler(CommandHandler("train", train_command))
    # /start —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ConversationHandler –∫–∞–∫ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, general_message_handler))

    logger.info("–ë–æ—Ç –§–∏—Ç–ì—É—Ä—É –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    main()