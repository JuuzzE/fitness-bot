import logging
import os # –î–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
import httpx # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –¥–ª—è –¥–µ–ø–ª–æ—è)
GROQ_API_KEY = os.getenv("GROQ_API_KEY", "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") # –û—Å—Ç–∞–≤–∏–ª –¥–µ—Ñ–æ–ª—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7561034666:AAEEWXkLlHkualECQ8Bmmkn2BNtlHa5Vrg4") # –û—Å—Ç–∞–≤–∏–ª –¥–µ—Ñ–æ–ª—Ç

if not GROQ_API_KEY or not TELEGRAM_TOKEN:
    logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GROQ_API_KEY –∏ TELEGRAM_TOKEN –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    # exit() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –±–µ–∑ –∫–ª—é—á–µ–π

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤)
# –ü—Ä–∏–º–µ—Ä: AWAITING_FOOD_ITEM, AWAITING_CALORIES –∏ —Ç.–¥.
AWAITING_WEIGHT = 1 # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å ConversationHandler, –Ω–æ –¥–ª—è –≤–µ—Å–∞ –∏ —Ç–µ–∫—É—â–∏–π –ø–æ–¥—Ö–æ–¥ –Ω–æ—Ä–º

SYSTEM_PROMPT_FITNESS_NUTRITION = """
–¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É –∏ –ø–∏—Ç–∞–Ω–∏—é –ø–æ –∏–º–µ–Ω–∏ –§–∏—Ç–ì—É—Ä—É.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏, –ø–æ–¥—Å—á–µ—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π,
—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.
–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Ç–æ—á–Ω—É—é, –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –¥–æ–º–∞ –±–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–∞–ª–æ—Ä–∏—è—Ö, —Å—Ç–∞—Ä–∞–π—Å—è –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç.
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""

async def ask_groq(user_message: str, model: str = "mixtral-8x7b-32768"):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Groq API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.
    """
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT_FITNESS_NUTRITION},
            {"role": "user", "content": user_message}
        ],
        "model": model
    }
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=30.0 # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            )
            response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP –æ—à–∏–±–æ–∫ 4xx/5xx
            response_data = response.json()

            if response_data.get("choices") and response_data["choices"][0].get("message"):
                return response_data["choices"][0]["message"]["content"]
            else:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq API: {response_data}")
                return "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∫ AI. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞."

    except httpx.HTTPStatusError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Groq API: {e.response.status_code} - {e.response.text}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI (–∫–æ–¥: {e.response.status_code}). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq API: {e}")
        return "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    except (KeyError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq API: {e} - –û—Ç–≤–µ—Ç: {response_data if 'response_data' in locals() else '–ù–µ –ø–æ–ª—É—á–µ–Ω'}")
        return "–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ ask_groq: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Ç–≤–æ–π –¥–æ–º–∞—à–Ω–∏–π AI-—Ç—Ä–µ–Ω–µ—Ä –§–∏—Ç–ì—É—Ä—É üí™\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:\n"
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (/train)\n"
        "‚öñÔ∏è –ó–∞–ø–∏—Å—å—é –≤–µ—Å–∞ (/weight)\n"
        "üçè –í–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –∫–∞–ª–æ—Ä–∏—è–º (–ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏!)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/train - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/weight - –ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏—Ç–Ω–µ—Å–µ –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏–∏!"
    )

async def weight_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75.5):")
    context.user_data['awaiting_weight'] = True # –§–ª–∞–≥ –¥–ª—è message_handler

async def handle_weight_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight_text = update.message.text.replace(',', '.') # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è float
        current_weight = float(weight_text)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ user_data –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        context.user_data['current_weight'] = current_weight
        context.user_data['awaiting_weight'] = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø–∏—Å–∞–ª –≤–µ—Å: {current_weight} –∫–≥")
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! –í–µ—Å {current_weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω. üìä")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75.5 –∏–ª–∏ 75). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ /weight.")
        # –ú–æ–∂–Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑
        # context.user_data['awaiting_weight'] = True # –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞

async def train_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫—É—é (–ø—Ä–∏–º–µ—Ä–Ω–æ 20-30 –º–∏–Ω—É—Ç) –¥–æ–º–∞—à–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–ª–∞ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –¥–∞–π –ø–∞—Ä—É —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –°—Ç–∏–ª—å ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç—Ä–µ–Ω–µ—Ä."
    await update.message.reply_text("–ü–æ–¥–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ. üèãÔ∏è‚Äç‚ôÇÔ∏è")
    reply = await ask_groq(prompt)
    await update.message.reply_text(reply)

async def general_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∂–¥–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –≤–µ—Å–∞
    if context.user_data.get('awaiting_weight'):
        await handle_weight_input(update, context)
        return

    user_message = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}: {user_message}")

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º—ã–π –≤–≤–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Groq
    await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º... ü§î")
    reply = await ask_groq(user_message)
    await update.message.reply_text(reply)


def main():
    if not TELEGRAM_TOKEN:
        logger.critical("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("weight", weight_command))
    app.add_handler(CommandHandler("train", train_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö,
    # –∏ –æ–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–≤–æ–¥ –≤–µ—Å–∞ –∏–ª–∏ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
    # –§–∏–ª—å—Ç—Ä ~filters.COMMAND –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∏ –≤ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω–æ.
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, general_message_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    main()