import logging
import os
import httpx
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
# from dotenv import load_dotenv # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .env –ª–æ–∫–∞–ª—å–Ω–æ
# load_dotenv()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

if not GROQ_API_KEY or not TELEGRAM_TOKEN:
    logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GROQ_API_KEY –∏ TELEGRAM_TOKEN.")
    # exit(1) # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –±–µ–∑ –∫–ª—é—á–µ–π

# --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI ---
SYSTEM_PROMPT_DIETITIAN = """
–¢—ã ‚Äî –§–∏—Ç–ì—É—Ä—É, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Ä–æ–ª—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∞ –∏ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä–∞.
–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ñ–∏—Ç–Ω–µ—Å–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º.
–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—â–µ–Ω–∏–∏ —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ–ª–Ω—ã–π) —Ç—ã –¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–æ—Å—Ç, –≤–µ—Å, —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ü–µ–ª–∏), —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å. –û–±—ä—è—Å–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ.
–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –ò–ú–¢, –±–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º, —Å—É—Ç–æ—á–Ω—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤—å —ç—Ç–∏ —Ä–∞—Å—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø–æ–Ω—è—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ, –∏—Å–ø–æ–ª—å–∑—É—è Markdown –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è.
–ò—Å–ø–æ–ª—å–∑—É–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤, –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, —ç–º–ø–∞—Ç–∏—á–Ω—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–û–±—â–∞–π—Å—è –Ω–∞ "—Ç—ã". –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è.
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Ç–≤–æ–µ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∫–∞–∫ –¥–∏–µ—Ç–æ–ª–æ–≥–∞/—Ç—Ä–µ–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∏–∞–≥–Ω–æ–∑), –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏ –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.
"""

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
(PROFILE_GENDER, PROFILE_AGE, PROFILE_HEIGHT, PROFILE_WEIGHT,
 PROFILE_ACTIVITY, PROFILE_GOAL) = range(6)

# --- –ö–ª—é—á–∏ –¥–ª—è context.user_data ---
GENDER, AGE, HEIGHT, CURRENT_WEIGHT, ACTIVITY_LEVEL, GOAL = \
    "gender", "age", "height", "current_weight", "activity_level", "goal"
PROFILE_COMPLETE = "profile_complete"
BMI, BMR, TDEE, TARGET_CALORIES = "bmi", "bmr", "tdee", "target_calories"
AWAITING_WEIGHT_UPDATE = "awaiting_weight_update"

# --- –§–∞–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ ---
ACTIVITY_FACTORS = {"–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è": 1.2, "–ª–µ–≥–∫–∞—è": 1.375, "—Å—Ä–µ–¥–Ω—è—è": 1.55, "–≤—ã—Å–æ–∫–∞—è": 1.725, "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è": 1.9}
GOAL_FACTORS = {"–ø–æ—Ö—É–¥–µ—Ç—å": -500, "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å": 0, "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": 300}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ ---
def calculate_bmi(weight_kg, height_cm):
    if not weight_kg or not height_cm or not isinstance(weight_kg, (int, float)) or not isinstance(height_cm, (int, float)) or height_cm == 0: return None
    return round(weight_kg / ((height_cm / 100) ** 2), 1)

def calculate_bmr(weight_kg, height_cm, age_years, gender_str):
    if not all([weight_kg, height_cm, age_years, gender_str]) or \
       not all(isinstance(i, (int, float)) for i in [weight_kg, height_cm, age_years]): return None
    gender_str = gender_str.lower()
    if gender_str == "–º—É–∂—Å–∫–æ–π":
        return round((10 * weight_kg) + (6.25 * height_cm) - (5 * age_years) + 5)
    elif gender_str == "–∂–µ–Ω—Å–∫–∏–π":
        return round((10 * weight_kg) + (6.25 * height_cm) - (5 * age_years) - 161)
    return None

def calculate_tdee(bmr, activity_level_str):
    if not bmr or not activity_level_str or not isinstance(bmr, (int, float)): return None
    factor = ACTIVITY_FACTORS.get(activity_level_str.lower())
    return round(bmr * factor) if factor else None

def calculate_target_calories(tdee, goal_str):
    if not tdee or not goal_str or not isinstance(tdee, (int,float)): return None
    adjustment = GOAL_FACTORS.get(goal_str.lower())
    return tdee + adjustment if adjustment is not None else None

def get_bmi_interpretation(bmi):
    if bmi is None: return ""
    if bmi < 18.5: return " (üìâ –î–µ—Ñ–∏—Ü–∏—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞)"
    if bmi < 25: return " (‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å)"
    if bmi < 30: return " (‚ö†Ô∏è –ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å)"
    return " (üÜò –û–∂–∏—Ä–µ–Ω–∏–µ)"

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Groq API ---
async def ask_groq(user_message: str, model: str = "llama3-8b-8192", system_prompt_override: str = None):
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}
    current_system_prompt = system_prompt_override if system_prompt_override else SYSTEM_PROMPT_DIETITIAN
    data = {"messages": [{"role": "system", "content": current_system_prompt}, {"role": "user", "content": user_message}], "model": model}
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post("https://api.groq.com/openai/v1/chat/completions", headers=headers, json=data, timeout=45.0)
            response.raise_for_status()
            response_data = response.json()
            if response_data.get("choices") and response_data["choices"][0].get("message"):
                return response_data["choices"][0]["message"]["content"]
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq: {response_data}")
            return "ü§ñ –ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏ —Å AI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
    except httpx.HTTPStatusError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –æ—Ç Groq: {e.response.status_code} - {e.response.text}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ—à–∏–±–∫—É decommissioned, —Ö–æ—Ç—è –º—ã —É–∂–µ —Å–º–µ–Ω–∏–ª–∏ –º–æ–¥–µ–ª—å
        if "model_decommissioned" in e.response.text:
             return f"üîå –û–π, –ø–æ—Ö–æ–∂–µ, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å AI ({model}) –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –≤ –∫—É—Ä—Å–µ!"
        return f"üîå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI (–∫–æ–¥: {e.response.status_code}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π API –∫–ª—é—á Groq –Ω–∞ Railway."
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq: {e}")
        return "üì° –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏."
    except (KeyError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Groq: {e}")
        return "ü§Ø –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ ask_groq: {e}", exc_info=True)
        return "üí• –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ —Å–æ–≤—Å–µ–º –Ω–µ —Ç–∞–∫! –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω (–Ω–∞–≤–µ—Ä–Ω–æ–µ)."

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è ConversationHandler (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è) ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ –º–Ω–æ–π. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–µ–≥–æ–¥–Ω—è?\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏!",
            parse_mode=ParseMode.MARKDOWN
        )
        return ConversationHandler.END
    
    if not context.user_data.get(GENDER):
        context.user_data.clear()
        logger.info(f"User {user.id} ({user.username}) –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    
    await update.message.reply_text(
        f"üåü –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø *–§–∏—Ç–ì—É—Ä—É* ‚Äì —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–¥–∏–µ—Ç–æ–ª–æ–≥ –∏ —Ç—Ä–µ–Ω–µ—Ä.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –±—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ. "
        "–≠—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ! ü§´\n\n"
        "üöπüö∫ –î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π *–ø–æ–ª*:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="–º—É–∂—Å–∫–æ–π"), InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="–∂–µ–Ω—Å–∫–∏–π")]
        ]),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROFILE_GENDER

async def handle_gender_and_ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data[GENDER] = query.data
    await query.edit_message_text(
        text=f"–ü–æ–ª: *{query.data.capitalize()}*. –û—Ç–ª–∏—á–Ω–æ! üëç\n\nüéÇ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π *–≤–æ–∑—Ä–∞—Å—Ç* (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):",
        parse_mode=ParseMode.MARKDOWN
    )
    return PROFILE_AGE

async def handle_age_and_ask_height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        age = int(update.message.text)
        if not 10 <= age <= 100: raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        context.user_data[AGE] = age
        await update.message.reply_text(
            text=f"–í–æ–∑—Ä–∞—Å—Ç: *{age} –ª–µ—Ç*. –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ‚úÖ\n\nüìè –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π *—Ä–æ—Å—Ç* (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):",
            parse_mode=ParseMode.MARKDOWN
        )
        return PROFILE_HEIGHT
    except ValueError as e:
        logger.warning(f"User {update.effective_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {update.message.text}. –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("ü§î –•–º, –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        return PROFILE_AGE

async def handle_height_and_ask_weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        height = int(update.message.text)
        if not 100 <= height <= 250: raise ValueError("–†–æ—Å—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        context.user_data[HEIGHT] = height
        await update.message.reply_text(
            text=f"–†–æ—Å—Ç: *{height} —Å–º*. –ó–∞–ø–∏—Å–∞–ª! üìù\n\n‚öñÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π *–≤–µ—Å* (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):",
            parse_mode=ParseMode.MARKDOWN
        )
        return PROFILE_WEIGHT
    except ValueError as e:
        logger.warning(f"User {update.effective_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç: {update.message.text}. –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("ü§î –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö –æ—Ç 100 –¥–æ 250 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175). –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
        return PROFILE_HEIGHT

async def handle_weight_and_ask_activity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        weight = float(update.message.text.replace(',', '.'))
        if not 30 <= weight <= 300: raise ValueError("–í–µ—Å –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        context.user_data[CURRENT_WEIGHT] = weight
        activity_buttons = [
            [InlineKeyboardButton("üßò‚Äç‚ôÄÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)", callback_data="–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è")],
            [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è –õ–µ–≥–∫–∞—è (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä/–Ω–µ–¥)", callback_data="–ª–µ–≥–∫–∞—è")],
            [InlineKeyboardButton("üèÉ‚Äç‚ôÄÔ∏è –°—Ä–µ–¥–Ω—è—è (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä/–Ω–µ–¥)", callback_data="—Å—Ä–µ–¥–Ω—è—è")],
            [InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÄÔ∏è –í—ã—Å–æ–∫–∞—è (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ 6-7 —Ä/–Ω–µ–¥)", callback_data="–≤—ã—Å–æ–∫–∞—è")],
            [InlineKeyboardButton("üî• –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è (—Ñ–∏–∑. —Ä–∞–±–æ—Ç–∞ + —Å–ø–æ—Ä—Ç)", callback_data="—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è")]
        ]
        await update.message.reply_text(
            text=f"–í–µ—Å: *{weight} –∫–≥*. –ü—Ä–∏–Ω—è—Ç–æ! üëå\n\nü§∏‚Äç‚ôÄÔ∏è –û—Ü–µ–Ω–∏ —Å–≤–æ–π –æ–±—ã—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å *—Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*:",
            reply_markup=InlineKeyboardMarkup(activity_buttons),
            parse_mode=ParseMode.MARKDOWN
        )
        return PROFILE_ACTIVITY
    except ValueError as e:
        logger.warning(f"User {update.effective_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å: {update.message.text}. –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("ü§î –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 30 –¥–æ 300 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5). –î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑–æ–∫!")
        return PROFILE_WEIGHT

async def handle_activity_and_ask_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data[ACTIVITY_LEVEL] = query.data
    await query.edit_message_text(
        text=f"–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: *{query.data.capitalize()}*. –°—É–ø–µ—Ä! üöÄ\n\nüéØ –ö–∞–∫–∞—è —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è *—Ü–µ–ª—å*?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìâ –ü–æ—Ö—É–¥–µ—Ç—å", callback_data="–ø–æ—Ö—É–¥–µ—Ç—å")],
            [InlineKeyboardButton("‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å", callback_data="–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")],
            [InlineKeyboardButton("üí™ –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", callback_data="–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É")]
        ]),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROFILE_GOAL

async def process_final_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = update.effective_user.id
    logger.info(f"User {user_id}: Entered process_final_profile with callback_data: {query.data}")

    await query.answer()
    context.user_data[GOAL] = query.data
    ud = context.user_data

    logger.info(f"User {user_id}: Goal '{ud.get(GOAL)}' saved. User data before calcs: {ud}")

    try:
        ud[BMI] = calculate_bmi(ud.get(CURRENT_WEIGHT), ud.get(HEIGHT))
        ud[BMR] = calculate_bmr(ud.get(CURRENT_WEIGHT), ud.get(HEIGHT), ud.get(AGE), ud.get(GENDER))
        ud[TDEE] = calculate_tdee(ud.get(BMR), ud.get(ACTIVITY_LEVEL))
        ud[TARGET_CALORIES] = calculate_target_calories(ud.get(TDEE), ud.get(GOAL))
        
        logger.info(f"User {user_id}: Calculations complete. BMI: {ud.get(BMI)}, BMR: {ud.get(BMR)}, TDEE: {ud.get(TDEE)}, TARGET_CALORIES: {ud.get(TARGET_CALORIES)}")

        if None in [ud.get(BMI), ud.get(BMR), ud.get(TDEE), ud.get(TARGET_CALORIES)]:
            logger.error(f"User {user_id}: One or more calculated values are None. Cannot complete profile.")
            await query.edit_message_text("–û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å. üò• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")
            context.user_data.pop(PROFILE_COMPLETE, None)
            return ConversationHandler.END

        ud[PROFILE_COMPLETE] = True
        logger.info(f"User {user_id}: PROFILE_COMPLETE set to True.")
        
        ud.pop(AWAITING_WEIGHT_UPDATE, None)

        bmi_interp = get_bmi_interpretation(ud.get(BMI))
        summary = (
            f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!* –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤. –í–æ—Ç —Ç–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n\n"
            f"üë§ *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n"
            f"  - –ü–æ–ª: _{ud.get(GENDER, 'N/A').capitalize()}_\n"
            f"  - –í–æ–∑—Ä–∞—Å—Ç: _{ud.get(AGE, 'N/A')} –ª–µ—Ç_\n"
            f"  - –†–æ—Å—Ç: _{ud.get(HEIGHT, 'N/A')} —Å–º_\n"
            f"  - –í–µ—Å: _{ud.get(CURRENT_WEIGHT, 'N/A')} –∫–≥_\n"
            f"  - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: _{ud.get(ACTIVITY_LEVEL, 'N/A').capitalize()}_\n"
            f"  - –¶–µ–ª—å: _{ud.get(GOAL, 'N/A').capitalize()}_\n\n"
            f"üìä *–†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
            f"  - –ò–ú–¢: *{ud.get(BMI, 'N/A')}*{bmi_interp}\n"
            f"  - BMR (–±–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º): *{ud.get(BMR, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å*\n"
            f"  - TDEE (—Å—É—Ç–æ—á–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å): *{ud.get(TDEE, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å*\n"
            f"  - ‚ú® *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —Ü–µ–ª–∏: *`{ud.get(TARGET_CALORIES, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å`* ‚ú®\n\n"
            "–¢–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏! –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n"
            "‚ö†Ô∏è *–ü–æ–º–Ω–∏, —ç—Ç–∏ —Ä–∞—Å—á–µ—Ç—ã –Ω–æ—Å—è—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –î–ª—è —Ç–æ—á–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Å—è —Å –≤—Ä–∞—á–æ–º.*"
        )
        await query.edit_message_text(text=summary, parse_mode=ParseMode.MARKDOWN)
        logger.info(f"User {user_id}: Profile summary sent. Exiting ConversationHandler.")
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"User {user_id}: ERROR in process_final_profile: {e}", exc_info=True)
        await query.edit_message_text(
            "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. üò• –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start."
        )
        context.user_data.pop(PROFILE_COMPLETE, None)
        return ConversationHandler.END

async def cancel_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∫–æ–¥ cancel_onboarding –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π "—Å—Ç–∏–ª—å–Ω–æ–π" –≤–µ—Ä—Å–∏–∏) ...
    user_id = update.effective_user.id
    if not context.user_data.get(PROFILE_COMPLETE):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        context.user_data.clear()
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")
    else:
        await update.message.reply_text("üëç –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π /start.")
    context.user_data.pop(AWAITING_WEIGHT_UPDATE, None)
    return ConversationHandler.END


# --- –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (menu_command, help_command, my_profile_command, weight_command_entry, train_command - –∫–∞–∫ –≤ "—Å—Ç–∏–ª—å–Ω–æ–π" –≤–µ—Ä—Å–∏–∏) ---
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –ù–∞–∂–º–∏ /start üòä", parse_mode=ParseMode.MARKDOWN)
        return
    menu_buttons = [
        [KeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (/train)"), KeyboardButton("‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å (/weight)")],
        [KeyboardButton("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å (/myprofile)"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å (/help)")],
    ]
    await update.message.reply_text(
        "üëá –í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True, one_time_keyboard=False)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø *–§–∏—Ç–ì—É—Ä—É* ‚Äì —Ç–≤–æ–π –≥–∏–¥ –≤ –º–∏—Ä–µ —Ñ–∏—Ç–Ω–µ—Å–∞ –∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.\n\n"
        "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.\n"
        "/myprofile - –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.\n"
        "/train - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n"
        "/weight - –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å.\n"
        "/cancel - (–í–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è) –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "üçè –ï—Å–ª–∏ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏—Ç–Ω–µ—Å–µ –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏–∏!"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def my_profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start üåü")
        return
    ud = context.user_data
    bmi_interp = get_bmi_interpretation(ud.get(BMI))
    summary = (
        f"üë§ *–¢–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—å, {update.effective_user.first_name}:*\n\n"
        f"  - –ü–æ–ª: _{ud.get(GENDER, 'N/A').capitalize()}_\n"
        f"  - –í–æ–∑—Ä–∞—Å—Ç: _{ud.get(AGE, 'N/A')} –ª–µ—Ç_\n"
        f"  - –†–æ—Å—Ç: _{ud.get(HEIGHT, 'N/A')} —Å–º_\n"
        f"  - –í–µ—Å: *{ud.get(CURRENT_WEIGHT, 'N/A')} –∫–≥*\n"
        f"  - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: _{ud.get(ACTIVITY_LEVEL, 'N/A').capitalize()}_\n"
        f"  - –¶–µ–ª—å: _{ud.get(GOAL, 'N/A').capitalize()}_\n\n"
        f"üìä *–†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
        f"  - –ò–ú–¢: *{ud.get(BMI, 'N/A')}*{bmi_interp}\n"
        f"  - BMR: *{ud.get(BMR, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å*\n"
        f"  - TDEE: *{ud.get(TDEE, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å*\n"
        f"  - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏: `{ud.get(TARGET_CALORIES, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å`\n\n"
        "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π /weight. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ /start (—Å—Ç–∞—Ä—ã–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω)."
    )
    await update.message.reply_text(summary, parse_mode=ParseMode.MARKDOWN)

async def weight_command_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –ù–∞–∂–º–∏ /start üòä")
        return
    await update.message.reply_text("‚öñÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π *—Ç–µ–∫—É—â–∏–π –≤–µ—Å* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):", parse_mode=ParseMode.MARKDOWN)
    context.user_data[AWAITING_WEIGHT_UPDATE] = True

async def handle_weight_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ handle_weight_update –∫–∞–∫ –≤ "—Å—Ç–∏–ª—å–Ω–æ–π" –≤–µ—Ä—Å–∏–∏, —Å ParseMode.MARKDOWN) ...
    try:
        new_weight = float(update.message.text.replace(',', '.'))
        if not 30 <= new_weight <= 300: raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å")
        ud = context.user_data
        ud[CURRENT_WEIGHT] = new_weight
        ud[BMI] = calculate_bmi(new_weight, ud.get(HEIGHT))
        ud[BMR] = calculate_bmr(new_weight, ud.get(HEIGHT), ud.get(AGE), ud.get(GENDER))
        ud[TDEE] = calculate_tdee(ud.get(BMR), ud.get(ACTIVITY_LEVEL))
        ud[TARGET_CALORIES] = calculate_target_calories(ud.get(TDEE), ud.get(GOAL))
        ud.pop(AWAITING_WEIGHT_UPDATE, None)
        bmi_interp = get_bmi_interpretation(ud.get(BMI))
        await update.message.reply_text(
            f"‚úÖ –í–µ—Å *{new_weight} –∫–≥* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã:\n"
            f"  - –ò–ú–¢: *{ud.get(BMI, 'N/A')}*{bmi_interp}\n"
            f"  - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏: `{ud.get(TARGET_CALORIES, 'N/A')} –∫–∫–∞–ª/–¥–µ–Ω—å`",
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ–±–Ω–æ–≤–∏–ª –≤–µ—Å: {new_weight} –∫–≥.")
    except ValueError:
        await update.message.reply_text("ü§î –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ /weight –∏–ª–∏ –≤–≤–µ–¥–∏ –≤–µ—Å —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_weight_update: {e}", exc_info=True)
        await update.message.reply_text("üí• –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞.")
        context.user_data.pop(AWAITING_WEIGHT_UPDATE, None)


async def train_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ train_command –∫–∞–∫ –≤ "—Å—Ç–∏–ª—å–Ω–æ–π" –≤–µ—Ä—Å–∏–∏, —Å ParseMode.MARKDOWN) ...
    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text("–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞—á–Ω–∏ —Å /start üåü")
        return
    ud = context.user_data
    profile_info = (f"–ü—Ä–æ—Ñ–∏–ª—å: –ü:{ud.get(GENDER,'N/A')}, –í:{ud.get(AGE,'N/A')}, "
                    f"–†:{ud.get(HEIGHT,'N/A')}—Å–º, –í–µ—Å:{ud.get(CURRENT_WEIGHT,'N/A')}–∫–≥, "
                    f"–ê–∫—Ç:{ud.get(ACTIVITY_LEVEL,'N/A')}, –¶–µ–ª—å:{ud.get(GOAL,'N/A')}. "
                    f"–ò–ú–¢:{ud.get(BMI,'N/A')}, –ö–∞–ª–æ—Ä–∏–∏:{ud.get(TARGET_CALORIES,'N/A')}.")
    prompt = (f"{profile_info} –°–æ–∑–¥–∞–π –¥–æ–º–∞—à–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (20-30 –º–∏–Ω) –±–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ—Ñ–∏–ª—å. "
              "–£–∫–∞–∂–∏ –ø–æ–¥—Ö–æ–¥—ã, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —Å–æ–≤–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∏—Å–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
    await update.message.reply_text("üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–¥–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è *–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É*... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏!", parse_mode=ParseMode.MARKDOWN)
    reply = await ask_groq(prompt)
    await update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def general_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ general_message_handler –∫–∞–∫ –≤ "—Å—Ç–∏–ª—å–Ω–æ–π" –≤–µ—Ä—Å–∏–∏, —Å ParseMode.MARKDOWN) ...
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏–∑ /menu, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∫–æ–º–∞–Ω–¥—ã
    user_message = update.message.text
    if user_message == "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (/train)": # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        await train_command(update, context)
        return
    if user_message == "‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å (/weight)":
        await weight_command_entry(update, context)
        return
    if user_message == "üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å (/myprofile)":
        await my_profile_command(update, context)
        return
    if user_message == "‚ùì –ü–æ–º–æ—â—å (/help)":
        await help_command(update, context)
        return
        
    if context.user_data.get(AWAITING_WEIGHT_UPDATE) is True:
        await handle_weight_update(update, context)
        return

    if not context.user_data.get(PROFILE_COMPLETE):
        await update.message.reply_text(
            "–ü–æ—Ö–æ–∂–µ, —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. "
            "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã —è –º–æ–≥ —Ç–µ–±–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å! üòä"
        )
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –∏ –Ω–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–µ—Å–∞, —Ç–æ —ç—Ç–æ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å –∫ AI
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id} ({update.effective_user.username}): {user_message}")
    ud = context.user_data
    profile_info = (f"–ö–æ–Ω—Ç–µ–∫—Å—Ç (–¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è AI): –ü:{ud.get(GENDER,'N/A')}, –í:{ud.get(AGE,'N/A')}, "
                    f"–†:{ud.get(HEIGHT,'N/A')}—Å–º, –í–µ—Å:{ud.get(CURRENT_WEIGHT,'N/A')}–∫–≥, "
                    f"–ê–∫—Ç:{ud.get(ACTIVITY_LEVEL,'N/A')}, –¶–µ–ª—å:{ud.get(GOAL,'N/A')}. "
                    f"–ò–ú–¢:{ud.get(BMI,'N/A')}, BMR:{ud.get(BMR,'N/A')}, TDEE:{ud.get(TDEE,'N/A')}, "
                    f"–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏:{ud.get(TARGET_CALORIES,'N/A')}. "
                    "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è —ç—Ç–æ: ")
    full_prompt = f"{profile_info}{user_message}"
    await update.message.reply_text("ü§î *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å...*", parse_mode=ParseMode.MARKDOWN)
    reply = await ask_groq(full_prompt)
    await update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    if not TELEGRAM_TOKEN:
        logger.critical("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
        return
    if not GROQ_API_KEY: # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ GROQ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –±–æ—Ç –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –¥–ª—è –Ω–µ-AI —Ñ—É–Ω–∫—Ü–∏–π
        logger.warning("GROQ_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. AI-—Ñ—É–Ω–∫—Ü–∏–∏ (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã) –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    onboarding_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            PROFILE_GENDER: [CallbackQueryHandler(handle_gender_and_ask_age, pattern="^(–º—É–∂—Å–∫–æ–π|–∂–µ–Ω—Å–∫–∏–π)$")],
            PROFILE_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_age_and_ask_height)],
            PROFILE_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_height_and_ask_weight)],
            PROFILE_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_weight_and_ask_activity)],
            PROFILE_ACTIVITY: [CallbackQueryHandler(handle_activity_and_ask_goal, pattern="^(–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è|–ª–µ–≥–∫–∞—è|—Å—Ä–µ–¥–Ω—è—è|–≤—ã—Å–æ–∫–∞—è|—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è)$")],
            PROFILE_GOAL: [CallbackQueryHandler(process_final_profile, pattern="^(–ø–æ—Ö—É–¥–µ—Ç—å|–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å|–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É)$")],
        },
        fallbacks=[CommandHandler("cancel", cancel_onboarding), CommandHandler("start", start_command)],
        allow_reentry=True, 
        per_user=True,
        per_chat=True, # –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã ConversationHandler —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    )
    app.add_handler(onboarding_conv_handler)

    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("myprofile", my_profile_command))
    app.add_handler(CommandHandler("weight", weight_command_entry))
    app.add_handler(CommandHandler("train", train_command))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, general_message_handler))

    logger.info("ü§ñ –ë–æ—Ç –§–∏—Ç–ì—É—Ä—É v2.1 (—Å –ª–æ–≥–∞–º–∏ –∏ —Å—Ç–∏–ª–µ–º) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    main()